import 'dart:io';
import 'dart:async';
import 'dart:typed_data';

import 'package:pocket_functions/pocket_functions.dart';
import 'package:%s/%s.entrypoint.g.dart';
import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as shelf_io;

main(List<String> arguments) async {
  final port = int.parse(Platform.environment['PORT'] ?? '8080');

  var handler = const Pipeline().addMiddleware(logRequests()).addHandler(_echoRequest);

  var server = await shelf_io.serve(handler, '0.0.0.0', 8080);

  // Enable content compression
  server.autoCompress = false;

  print('Serving at http://${server.address.host}:${server.port}');
}

Future<Uint8List> readAsUint8List(Stream<List<int>> stream) async {
  final List<int> data = await stream.expand((chunk) => chunk).toList();
  return Uint8List.fromList(data);
}

FutureOr<Response> _echoRequest(Request r) async {
  var request = PocketRequest(
    path: r.url.path,
    httpMethod: r.method,
    body: await readAsUint8List(r.read()),
    contentType: r.mimeType ?? "text/plain",
    params: r.url.queryParametersAll,
  );
  await pocketFunctionsEntryPoint(request);
  return Response.ok(request.response.buffer.toString(), 
    headers: request.response.headers,
  );
}
